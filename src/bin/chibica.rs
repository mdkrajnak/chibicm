//! A program that generates ca certs, the associate private key, and signs CSRs
//! generated by certificate requestors.

#[path = "../ca.rs"]
pub mod ca;

#[path = "../app.rs"]
pub mod app;

use app::*;
use ca::{mk_ca_cert, mk_ca_signed_cert};
use chrono::Utc;
use clap::{Arg, ArgMatches, Command};
use openssl::pkey::PKey;
use openssl::x509::{X509, X509Req};
use std::error::Error;
use crate::ca::mk_private_key;

/// A program that generates ca certs, certs verified by the ca, and public
/// and private keys.

/// Creates a new CA certificate and key and stores them in files.
/// 
/// # Returns
/// 
/// Ok: (), Err: An error string.
/// 
fn run_new(args: &ArgMatches) -> Result<(), Box<dyn Error>> {
    
    // Process command line arguments.
    let root = String::from("root");
    let name = args.get_one("name").unwrap_or(&root);

    let default_days: u32 = 365;
    let days = args.get_one("days").unwrap_or(&default_days).clone();
    
    // Set the start time, using the supplied value if one, otherwise using now.
    let default_start =  Utc::now().format("%Y%m%d%H%M%S").to_string();
    let start = start_time_from_arg(args.get_one::<String>("start").unwrap_or(&default_start))?;

    // Create the root certificate.
    let ca_key_pair = mk_private_key(2048)?;
    let x509_name = name_from_args(&args)?;
    let ca_cert = mk_ca_cert(&ca_key_pair, &x509_name, &start, days)?;
        
    // Write the CA certificate, public key, and private key to files.
    write_file(&format!("{}.crt", name), ca_cert.to_pem()?.as_ref())?;
    write_file(&format!("{}.key", name), ca_key_pair.public_key_to_pem()?.as_ref())?;
    write_file(&format!("{}-private.key", name), ca_key_pair.private_key_to_pem_pkcs8()?.as_ref())?;
    
    Ok(())
}

/// Sign a CSR with the indicated CA.
/// Reads the CSR and CA data from files.
/// Saves the new certificate to a file.
fn run_sign(args: &ArgMatches) -> Result<(), Box<dyn Error>> {

    // Process command line arguments.
    let root = String::from("root");
    let ca = args.get_one("ca").unwrap_or(&root);

    let client = String::from("client");
    let csrname = args.get_one("name").unwrap_or(&client);

    let default_days  : u32 = 365;
    let days = args.get_one("days").unwrap_or(&default_days).clone();

    let default_start =  Utc::now().format("%Y%m%d%H%M%S").to_string();
    let start = start_time_from_arg(args.get_one::<String>("start").unwrap_or(&default_start))?;

    // Read CA cert, keys, and CSR from files.
    let cabytes = read_file(&format!("{ca}.crt"))?;
    let cacert = X509::from_pem(&cabytes)?;

    let keybytes = read_file(&format!("{}-private.key", ca))?;
    let private_key = PKey::private_key_from_pem(&keybytes)?;

    let csrbytes = read_file(&format!("{}.csr", csrname))?;
    let csr = X509Req::from_pem(&csrbytes)?;

    // Create the cert and save to file.
    let cert = mk_ca_signed_cert(&cacert, &private_key, &csr, &start, days)?;
    write_file(&format!("{}.crt", csrname), cert.to_pem()?.as_ref())?;

    Ok(())
}

fn run(args: &ArgMatches) -> Result<(), Box<dyn Error>> {
    match args.subcommand() {
        Some(("new", subargs)) => run_new(subargs)?,
        Some(("sign", subargs)) => run_sign(subargs)?,

        // @TODO Modify this to print the unknown command and return an error result.
        _ => println!("Unknown command"),
    };
    
    Ok(())
}

fn main() -> Result<(), Box<dyn Error>> {
    let args = Command::new("chibica")
        .version("0.0.1")
        .about("Chibi CA")
        .subcommand(Command::new("new")
            .about("Create a new root CA")
            .arg(Arg::new("name")
                .long("name")
                .short('n')
                .help("The CA certificate common name (CN)")
                .default_value("root"))
            .arg(Arg::new("organization")
                .long("organization")
                .short('o')
                .help("The CA certificate organization (O)")
                .default_value(""))
            .arg(Arg::new("unit")
                .long("unit")
                .short('u')
                .help("The CA certificate organizational unit (OU)")
                .default_value(""))
            .arg(Arg::new("country")
                .long("country")
                .short('c')
                .help("The CA certificate country (C)")
                .default_value(""))
            .arg(Arg::new("state")
                .long("state")
                .short('s')
                .help("The CA certificate state (ST)")
                .default_value(""))
            .arg(Arg::new("location")
                .long("location")
                .short('l')
                .help("The location (L) to assign to the CA's certifcate")
                .default_value(""))
            .arg(Arg::new("email")
                .long("email")
                .short('e')
                .help("The email (emailAddress) to assign to the CA's certifcate")
                .default_value(""))
            .arg(Arg::new("bits")
                .long("bits")
                .short('b')
                .help("The number of bits to use when generating the private key")
                .default_value("2096"))
            .arg(Arg::new("start")
                .long("start")
                .help("The UTC start date of the certificate in YYYYMMDD[HH[MM[SS]]] format"))
            .arg(Arg::new("days")
                .long("days")
                .short('d')
                .value_parser(clap::value_parser!(u32))
                .help("The number of days the certificate should be valid")
                .default_value("365")))
        .subcommand(Command::new("sign")
            .about("Sign a CSR")
            .arg(Arg::new("ca")
                .long("ca")
                .short('c')
                .help("The CA to use to sign the certificate, use 'list' to see the available CAs")
                .default_value("root"))
            .arg(Arg::new("name")
                .long("name")
                .short('n')
                .help("The name of the certificate signing request to sign")
                .required(true))
            .arg(Arg::new("start")
                .long("start")
                .help("The UTC start date of the certificate in YYYYMMDD[HH[MM[SS]]] format"))
            .arg(Arg::new("days")
                .long("days")
                .short('d')
                .value_parser(clap::value_parser!(u32))
                .help("The number of days the certificate should be valid")
                .default_value("365")))
        .get_matches();
    
    run(&args)?;
    
    Ok(())
}

